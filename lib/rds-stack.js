"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RdsStack = void 0;
const cdk = require("aws-cdk-lib");
const constructs_1 = require("constructs");
const ec2 = require("aws-cdk-lib/aws-ec2");
class RdsStack extends cdk.Stack {
}
exports.RdsStack = RdsStack;
vpc: ec2.Vpc;
constructor(scope, constructs_1.Construct, id, string, props ?  : cdk.StackProps);
{
    super(scope, id, props);
    this.vpc = new ec2.Vpc(this, 'TechHealthVpc', {
        cidr: '10.0.0.0/16',
        maxAzs: 2,
        subnetConfiguration: [
            {
                cidrMask: 24,
                name: 'PublicSubnet',
                subnetType: ec2.SubnetType.PUBLIC, // ✅ For Bastion Host
            },
            {
                cidrMask: 24,
                name: 'PrivateSubnet',
                subnetType: ec2.SubnetType.PRIVATE_WITH_EGRESS, // ✅ For EC2 Instances
            },
            {
                cidrMask: 24,
                name: 'IsolatedSubnet',
                subnetType: ec2.SubnetType.PRIVATE_ISOLATED, // ✅ For RDS Database
            }
        ],
        natGateways: 0 // ✅ No NAT Gateway
    });
    // Bastion Host Security Group
    const bastionSG = new ec2.SecurityGroup(this, 'BastionHostSG', {
        vpc: this.vpc,
        description: 'Allow SSH access to the Bastion Host',
        allowAllOutbound: true
    });
    bastionSG.addIngressRule(ec2.Peer.anyIpv4(), ec2.Port.tcp(22), 'Allow SSH from anywhere');
    // Bastion Host EC2 Instance
    const bastionHost = new ec2.Instance(this, 'BastionHost', {
        instanceType: ec2.InstanceType.of(ec2.InstanceClass.T2, ec2.InstanceSize.MICRO),
        machineImage: new ec2.AmazonLinuxImage(),
        vpc: this.vpc,
        vpcSubnets: { subnetType: ec2.SubnetType.PUBLIC }, // ✅ Place Bastion in Public Subnet
        keyName: 'techhealth-key', // ✅ Ensure this key pair exists in your AWS console
        securityGroup: bastionSG
    });
    // Route Table for Public Subnet (ensures Bastion Host has internet access)
    const publicRouteTable = new ec2.CfnRoute(this, 'PublicRoute', {
        routeTableId: this.vpc.publicSubnets[0].routeTable.routeTableId,
        destinationCidrBlock: '0.0.0.0/0',
        gatewayId: this.vpc.internetGatewayId,
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmRzLXN0YWNrLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsicmRzLXN0YWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLG1DQUFtQztBQUNuQywyQ0FBdUM7QUFDdkMsMkNBQTJDO0FBRTNDLE1BQWEsUUFBUyxTQUFRLEdBQUcsQ0FBQyxLQUFLO0NBQVE7QUFBL0MsNEJBQStDO0FBQzNCLEdBQUcsRUFBRSxHQUFHLENBQUMsR0FBRyxDQUFDO0FBRTdCLFdBQVcsQ0FBQyxLQUFLLEVBQUUsc0JBQVMsRUFBRSxFQUFFLEVBQUUsTUFBTSxFQUFFLEtBQUssQ0FBQSxDQUFDLENBQUEsQ0FBQSxDQUFDLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxDQUFBO0FBQUMsQ0FBQztJQUMvRCxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsRUFBRSxLQUFLLENBQUMsQ0FBQztJQUV4QixJQUFJLENBQUMsR0FBRyxHQUFHLElBQUksR0FBRyxDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUUsZUFBZSxFQUFFO1FBQzFDLElBQUksRUFBRSxhQUFhO1FBQ25CLE1BQU0sRUFBRSxDQUFDO1FBQ1QsbUJBQW1CLEVBQUU7WUFDakI7Z0JBQ0ksUUFBUSxFQUFFLEVBQUU7Z0JBQ1osSUFBSSxFQUFFLGNBQWM7Z0JBQ3BCLFVBQVUsRUFBRSxHQUFHLENBQUMsVUFBVSxDQUFDLE1BQU0sRUFBSyxxQkFBcUI7YUFDOUQ7WUFDRDtnQkFDSSxRQUFRLEVBQUUsRUFBRTtnQkFDWixJQUFJLEVBQUUsZUFBZTtnQkFDckIsVUFBVSxFQUFFLEdBQUcsQ0FBQyxVQUFVLENBQUMsbUJBQW1CLEVBQUUsc0JBQXNCO2FBQ3pFO1lBQ0Q7Z0JBQ0ksUUFBUSxFQUFFLEVBQUU7Z0JBQ1osSUFBSSxFQUFFLGdCQUFnQjtnQkFDdEIsVUFBVSxFQUFFLEdBQUcsQ0FBQyxVQUFVLENBQUMsZ0JBQWdCLEVBQUUscUJBQXFCO2FBQ3JFO1NBQ0o7UUFDRCxXQUFXLEVBQUUsQ0FBQyxDQUFFLG1CQUFtQjtLQUN0QyxDQUFDLENBQUM7SUFFSCw4QkFBOEI7SUFDOUIsTUFBTSxTQUFTLEdBQUcsSUFBSSxHQUFHLENBQUMsYUFBYSxDQUFDLElBQUksRUFBRSxlQUFlLEVBQUU7UUFDM0QsR0FBRyxFQUFFLElBQUksQ0FBQyxHQUFHO1FBQ2IsV0FBVyxFQUFFLHNDQUFzQztRQUNuRCxnQkFBZ0IsRUFBRSxJQUFJO0tBQ3pCLENBQUMsQ0FBQztJQUVILFNBQVMsQ0FBQyxjQUFjLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsRUFBRSxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSx5QkFBeUIsQ0FBQyxDQUFDO0lBRTFGLDRCQUE0QjtJQUM1QixNQUFNLFdBQVcsR0FBRyxJQUFJLEdBQUcsQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLGFBQWEsRUFBRTtRQUN0RCxZQUFZLEVBQUUsR0FBRyxDQUFDLFlBQVksQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBQyxFQUFFLEVBQUUsR0FBRyxDQUFDLFlBQVksQ0FBQyxLQUFLLENBQUM7UUFDL0UsWUFBWSxFQUFFLElBQUksR0FBRyxDQUFDLGdCQUFnQixFQUFFO1FBQ3hDLEdBQUcsRUFBRSxJQUFJLENBQUMsR0FBRztRQUNiLFVBQVUsRUFBRSxFQUFFLFVBQVUsRUFBRSxHQUFHLENBQUMsVUFBVSxDQUFDLE1BQU0sRUFBRSxFQUFFLG1DQUFtQztRQUN0RixPQUFPLEVBQUUsZ0JBQWdCLEVBQUcsb0RBQW9EO1FBQ2hGLGFBQWEsRUFBRSxTQUFTO0tBQzNCLENBQUMsQ0FBQztJQUVILDJFQUEyRTtJQUMzRSxNQUFNLGdCQUFnQixHQUFHLElBQUksR0FBRyxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsYUFBYSxFQUFFO1FBQzNELFlBQVksRUFBRSxJQUFJLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsWUFBWTtRQUMvRCxvQkFBb0IsRUFBRSxXQUFXO1FBQ2pDLFNBQVMsRUFBRSxJQUFJLENBQUMsR0FBRyxDQUFDLGlCQUFrQjtLQUN6QyxDQUFDLENBQUM7QUFDUCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgY2RrIGZyb20gJ2F3cy1jZGstbGliJztcbmltcG9ydCB7IENvbnN0cnVjdCB9IGZyb20gJ2NvbnN0cnVjdHMnO1xuaW1wb3J0ICogYXMgZWMyIGZyb20gJ2F3cy1jZGstbGliL2F3cy1lYzInO1xuXG5leHBvcnQgY2xhc3MgUmRzU3RhY2sgZXh0ZW5kcyBjZGsuU3RhY2sgeyAuLi4gfVxuICAgIHB1YmxpYyByZWFkb25seSB2cGM6IGVjMi5WcGM7XG5cbiAgICBjb25zdHJ1Y3RvcihzY29wZTogQ29uc3RydWN0LCBpZDogc3RyaW5nLCBwcm9wcz86IGNkay5TdGFja1Byb3BzKSB7XG4gICAgICAgIHN1cGVyKHNjb3BlLCBpZCwgcHJvcHMpO1xuXG4gICAgICAgIHRoaXMudnBjID0gbmV3IGVjMi5WcGModGhpcywgJ1RlY2hIZWFsdGhWcGMnLCB7XG4gICAgICAgICAgICBjaWRyOiAnMTAuMC4wLjAvMTYnLFxuICAgICAgICAgICAgbWF4QXpzOiAyLFxuICAgICAgICAgICAgc3VibmV0Q29uZmlndXJhdGlvbjogW1xuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgY2lkck1hc2s6IDI0LFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiAnUHVibGljU3VibmV0JyxcbiAgICAgICAgICAgICAgICAgICAgc3VibmV0VHlwZTogZWMyLlN1Ym5ldFR5cGUuUFVCTElDLCAgICAvLyDinIUgRm9yIEJhc3Rpb24gSG9zdFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBjaWRyTWFzazogMjQsXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6ICdQcml2YXRlU3VibmV0JyxcbiAgICAgICAgICAgICAgICAgICAgc3VibmV0VHlwZTogZWMyLlN1Ym5ldFR5cGUuUFJJVkFURV9XSVRIX0VHUkVTUywgLy8g4pyFIEZvciBFQzIgSW5zdGFuY2VzXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGNpZHJNYXNrOiAyNCxcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogJ0lzb2xhdGVkU3VibmV0JyxcbiAgICAgICAgICAgICAgICAgICAgc3VibmV0VHlwZTogZWMyLlN1Ym5ldFR5cGUuUFJJVkFURV9JU09MQVRFRCwgLy8g4pyFIEZvciBSRFMgRGF0YWJhc2VcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgbmF0R2F0ZXdheXM6IDAgIC8vIOKchSBObyBOQVQgR2F0ZXdheVxuICAgICAgICB9KTtcblxuICAgICAgICAvLyBCYXN0aW9uIEhvc3QgU2VjdXJpdHkgR3JvdXBcbiAgICAgICAgY29uc3QgYmFzdGlvblNHID0gbmV3IGVjMi5TZWN1cml0eUdyb3VwKHRoaXMsICdCYXN0aW9uSG9zdFNHJywge1xuICAgICAgICAgICAgdnBjOiB0aGlzLnZwYyxcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiAnQWxsb3cgU1NIIGFjY2VzcyB0byB0aGUgQmFzdGlvbiBIb3N0JyxcbiAgICAgICAgICAgIGFsbG93QWxsT3V0Ym91bmQ6IHRydWVcbiAgICAgICAgfSk7XG5cbiAgICAgICAgYmFzdGlvblNHLmFkZEluZ3Jlc3NSdWxlKGVjMi5QZWVyLmFueUlwdjQoKSwgZWMyLlBvcnQudGNwKDIyKSwgJ0FsbG93IFNTSCBmcm9tIGFueXdoZXJlJyk7XG5cbiAgICAgICAgLy8gQmFzdGlvbiBIb3N0IEVDMiBJbnN0YW5jZVxuICAgICAgICBjb25zdCBiYXN0aW9uSG9zdCA9IG5ldyBlYzIuSW5zdGFuY2UodGhpcywgJ0Jhc3Rpb25Ib3N0Jywge1xuICAgICAgICAgICAgaW5zdGFuY2VUeXBlOiBlYzIuSW5zdGFuY2VUeXBlLm9mKGVjMi5JbnN0YW5jZUNsYXNzLlQyLCBlYzIuSW5zdGFuY2VTaXplLk1JQ1JPKSxcbiAgICAgICAgICAgIG1hY2hpbmVJbWFnZTogbmV3IGVjMi5BbWF6b25MaW51eEltYWdlKCksXG4gICAgICAgICAgICB2cGM6IHRoaXMudnBjLFxuICAgICAgICAgICAgdnBjU3VibmV0czogeyBzdWJuZXRUeXBlOiBlYzIuU3VibmV0VHlwZS5QVUJMSUMgfSwgLy8g4pyFIFBsYWNlIEJhc3Rpb24gaW4gUHVibGljIFN1Ym5ldFxuICAgICAgICAgICAga2V5TmFtZTogJ3RlY2hoZWFsdGgta2V5JywgIC8vIOKchSBFbnN1cmUgdGhpcyBrZXkgcGFpciBleGlzdHMgaW4geW91ciBBV1MgY29uc29sZVxuICAgICAgICAgICAgc2VjdXJpdHlHcm91cDogYmFzdGlvblNHXG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIFJvdXRlIFRhYmxlIGZvciBQdWJsaWMgU3VibmV0IChlbnN1cmVzIEJhc3Rpb24gSG9zdCBoYXMgaW50ZXJuZXQgYWNjZXNzKVxuICAgICAgICBjb25zdCBwdWJsaWNSb3V0ZVRhYmxlID0gbmV3IGVjMi5DZm5Sb3V0ZSh0aGlzLCAnUHVibGljUm91dGUnLCB7XG4gICAgICAgICAgICByb3V0ZVRhYmxlSWQ6IHRoaXMudnBjLnB1YmxpY1N1Ym5ldHNbMF0ucm91dGVUYWJsZS5yb3V0ZVRhYmxlSWQsXG4gICAgICAgICAgICBkZXN0aW5hdGlvbkNpZHJCbG9jazogJzAuMC4wLjAvMCcsXG4gICAgICAgICAgICBnYXRld2F5SWQ6IHRoaXMudnBjLmludGVybmV0R2F0ZXdheUlkISxcbiAgICAgICAgfSk7XG4gICAgfVxufVxuXG4iXX0=